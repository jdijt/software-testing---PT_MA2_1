module Assignment2Test where

import qualified Assignment2 as A2 
import qualified Lecture5 as L5 hiding (main)

 
testrtAssignment2 :: IO [()]
testrtAssignment2 = runSolver A2.solveAndShow exampleGrids

testrtLecture5 :: IO [()]
testrtLecture5 = runSolver L5.solveAndShow exampleGrids

runSolver :: ([[Int]] -> IO [()]) -> [[[Int]]] -> IO [()]
runSolver _ [] = error "No grids given."
runSolver f [x] = f x 
runSolver f (x:xs) = do
    _ <- f x;
    runSolver f xs


exampleGrids :: [[[Int]]]
exampleGrids = [[[0,0,0,0,2,0,0,0,0],[0,0,5,0,4,0,3,1,0],[0,0,0,6,0,7,8,0,0],[2,3,0,0,0,0,0,0,0],
                 [0,0,0,4,0,9,0,3,0],[4,6,0,5,0,0,0,0,0],[6,0,2,0,0,0,0,0,0],[9,0,0,0,0,0,6,0,1],
                 [0,0,7,0,0,0,0,0,9]],[[0,9,0,0,0,8,0,0,0],[7,0,8,0,2,0,0,0,0],[0,0,0,4,0,0,0,0,2],
                 [0,0,0,0,0,0,0,5,0],[9,0,0,0,7,0,8,6,3],[0,0,0,0,1,0,9,0,0],[6,4,0,0,0,5,0,2,0],
                 [2,0,0,0,0,0,5,0,0],[0,0,1,7,0,0,0,0,0]],[[0,0,0,0,0,0,2,8,0],[0,0,2,0,0,1,0,7,0],
                 [0,0,0,0,9,8,0,3,0],[9,0,4,6,3,5,0,0,0],[0,5,0,0,0,0,0,0,0],[0,0,0,0,8,0,4,6,0],
                 [0,7,0,0,0,0,3,0,6],[1,0,0,0,4,0,0,0,0],[8,0,0,9,0,0,0,0,7]],[[0,0,4,3,0,2,0,7,0],
                 [6,0,0,0,0,1,4,0,0],[0,0,0,0,6,0,0,5,1],[0,0,0,0,0,8,0,0,0],[0,2,7,0,0,0,0,3,0],
                 [0,0,9,0,1,0,6,2,0],[0,0,0,8,0,0,0,0,5],[4,0,0,6,0,0,0,1,0],[0,0,0,0,7,0,2,0,0]],
                 [[5,0,4,0,0,0,0,0,9],[0,7,0,3,4,0,6,0,0],[0,0,0,8,0,0,0,2,0],[1,8,3,0,0,4,0,0,0],
                 [0,0,0,1,0,2,0,0,5],[0,0,0,0,0,0,0,0,0],[0,0,2,0,0,0,0,0,0],[9,1,0,0,0,0,4,0,0],
                 [0,0,0,0,0,0,0,3,8]],[[0,0,0,0,0,6,3,5,0],[0,1,0,0,0,3,0,7,0],[0,5,3,0,0,0,0,0,0],
                 [1,0,0,0,0,0,4,0,6],[0,0,6,0,0,1,0,0,0],[0,0,2,0,6,0,0,0,7],[2,0,0,0,5,0,0,3,9],
                 [0,0,9,0,0,0,8,0,5],[0,3,0,4,0,0,0,0,0]],[[9,5,0,0,2,6,0,0,0],[0,0,0,0,0,0,0,0,7],
                 [3,1,0,5,7,0,0,0,0],[0,7,0,1,0,0,2,5,8],[4,0,5,0,0,8,3,0,0],[0,0,0,7,0,0,0,0,0],
                 [0,0,0,0,0,4,0,3,0],[0,0,0,0,8,0,6,0,0],[0,9,0,6,0,0,7,0,0]],[[0,8,0,6,0,0,0,0,0],
                 [4,0,0,0,0,0,0,0,6],[0,0,9,1,0,0,0,7,8],[0,0,0,0,3,0,0,0,0],[2,0,0,0,0,5,4,0,0],
                 [0,5,1,0,0,0,9,0,0],[0,0,7,2,0,3,0,0,0],[0,2,5,7,0,9,1,0,0],[0,0,0,0,0,0,0,9,0]],
                 [[0,0,4,6,0,5,8,0,3],[0,0,6,0,7,0,0,0,0],[0,3,0,9,0,0,0,0,0],[6,9,0,0,0,0,7,0,0],
                 [0,0,7,0,0,0,1,0,0],[0,0,0,8,4,0,3,0,0],[0,0,0,1,0,0,0,0,0],[0,0,0,0,3,9,0,0,1],
                 [0,4,0,0,0,0,6,8,0]],[[0,0,0,0,0,0,0,0,7],[0,0,0,0,9,0,0,0,0],[0,0,7,1,0,5,0,0,0],
                 [0,7,5,0,0,0,6,0,3],[0,9,4,8,0,0,7,0,0],[3,0,0,0,0,0,0,0,0],[0,0,0,0,3,7,5,0,9],
                 [2,0,0,0,0,4,0,0,0],[0,0,0,2,0,0,0,1,0]]]

-- Used for generating the examples
genGridList :: IO [A2.Grid]
genGridList = genGrid 10 []

genGrid :: Integer -> [A2.Grid] -> IO [A2.Grid]
genGrid k grid = if k == 0 then return grid
                    else do 
                      node <- main
                      let g = A2.sud2grid (fst node)
                      genGrid (k-1) (g:grid)

main :: IO A2.Node
main = do [r] <- A2.rsolveNs [A2.emptyN]
          -- showNode r
          s  <- A2.genProblem r
          return s            

